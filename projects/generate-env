#!/usr/bin/env bash

# Setting up colors for echo commands
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Define the function to create directories and files
touchfile() {
    local file="$1"
    mkdir -p -- "$(dirname -- "$file")"  # Create the directory if it doesn't exist
    touch -- "$file"  # Create the file
}

# Function to prompt user for input with a default value and ensure it is not empty
prompt() {
    local PROMPT_MESSAGE=$1
    local DEFAULT_VALUE=$2
    local INPUT_VALUE

    while true; do
        read -p "$PROMPT_MESSAGE [$DEFAULT_VALUE]: " INPUT_VALUE
        INPUT_VALUE="${INPUT_VALUE:-$DEFAULT_VALUE}"

        if [ -z "$INPUT_VALUE" ]; then
            echo -e "${RED}Input cannot be empty. Please provide a valid input.${NC}"
        else
            echo "$INPUT_VALUE"
            break
        fi
    done
}

# Function to ask for password twice, ensure both entries match, and they are not empty
ask_twice() {
    local prompt="$1"
    local secret="$2"
    local val1 val2

    while true; do
        if [ "$secret" = "true" ]; then
            read -rsp "$prompt: " val1
            echo >&2  # Print a new line after hidden input
        else
            read -rp "$prompt: " val1
            echo >&2
        fi

        if [ -z "$val1" ]; then
            echo -e "${RED}Password cannot be empty. Please enter a valid password.${NC}" >&2
            continue
        fi

        if [ "$secret" = "true" ]; then
            read -rsp "Confirm password: " val2
            echo >&2
        else
            read -rp "Confirm password: " val2
            echo >&2
        fi

        if [ "$val1" = "$val2" ]; then
            echo -e "${GREEN}Password confirmed.${NC}" >&2
            echo "$val1"
            break
        else
            echo -e "${RED}Passwords do not match. Please try again.${NC}" >&2
            echo >&2  # Blank line for readability
        fi
    done
}

# Ensure the global $WORKBASE is set in the environment
if [ -z "$WORKBASE" ]; then
    echo -e "${RED}WORKBASE is not set. Please ensure it's defined in your environment.${NC}"
    exit 1
fi

# Prompt for ORB machine details and ensure they are not empty
DISTRO=$(prompt "Enter the Linux distribution for the ORB machine (e.g., ubuntu, debian)" "ubuntu")
VERSION=$(prompt "Enter the Linux version for the ORB machine (e.g., noble, jammy, focal)" "jammy")
ARCH=$(prompt "Enter the architecture (amd64/arm64, default is amd64)" "amd64")
MACHINE_NAME=$(prompt "Enter the machine name" "frappe-orb")

# Prompt for Frappe setup details and ensure they are not empty
FRAPPE_USER=$(prompt "Enter the username for the Frappe user" "frappe")
MARIADB_ROOT_PASSWORD=$(ask_twice "Enter the MariaDB root password for Frappe setup" "true")
ADMIN_PASSWORD=$(ask_twice "Enter the admin password for the Frappe site" "true")
TIMEZONE=$(prompt "Enter your timezone (e.g., 'Asia/Kolkata')" "UTC")

# Define the path for the .env file and ensure the directory exists
ENV_FILE="$WORKBASE/$MACHINE_NAME/.env"
touchfile "$ENV_FILE"

# Save variables to the .env file
echo "DISTRO='$DISTRO'" > $ENV_FILE
echo "VERSION='$VERSION'" >> $ENV_FILE
echo "ARCH='$ARCH'" >> $ENV_FILE
echo "MACHINE_NAME='$MACHINE_NAME'" >> $ENV_FILE
echo "FRAPPE_USER='$FRAPPE_USER'" >> $ENV_FILE
echo "MARIADB_ROOT_PASSWORD='$MARIADB_ROOT_PASSWORD'" >> $ENV_FILE
echo "ADMIN_PASSWORD='$ADMIN_PASSWORD'" >> $ENV_FILE
echo "TIMEZONE='$TIMEZONE'" >> $ENV_FILE

echo -e "${GREEN}Environment variables saved to $ENV_FILE.${NC}"
